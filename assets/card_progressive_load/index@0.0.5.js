(()=>{const e={leftToRight:"translateX(-50%)",rightToLeft:"translateX(50%)",topToBottom:"translateY(-20%)",bottomToTop:"translateY(20%)",opacity:"",scale:"scale(0.5)",rotateX:"scale(0.5) rotateX(90deg)"},t="scale(1) rotateX(0) translate(0)",n={opacity:"0",filter:"blur(20px)"},s={opacity:"1",filter:"blur(0)"},r=new Map,a=(r,a)=>{r.dataset.isIntersecting=a;const o=r.dataset.enterAnimation;let i={transform:t};if(i=Object.assign(i,s),!a&&o){i={transform:e[o]},i=Object.assign(i,n)}Object.assign(r.style,i)},o=e=>{for(const t of e){const e=t.target;if(t.isIntersecting){if("true"==e.dataset.isIntersecting)return;a(e,!0)}else{if("false"==e.dataset.isIntersecting)return;a(e,!1)}}},i=[{className:"#recent-posts .recent-post-item",enterAnimation:"rotateX",perspective:!0},{className:"#aside-content .card-widget:not(.mobile #card-toc)",enterAnimation:"rightToLeft",perspective:!1}],c=()=>{setTimeout((()=>{(()=>{for(const e of r.entries()){const[t,n]=e;n.unobserve(t)}r.clear()})(),(s=>{s.forEach((({className:s,enterAnimation:a,perspective:i})=>{const c=document.querySelectorAll(s);c.length&&i&&("number"==typeof i?c[0].parentElement.style.perspective=i+"px":"boolean"==typeof i&&(c[0].parentElement.style.perspective="1000px")),c.forEach((s=>{const i=new IntersectionObserver(o,{threshold:.1});r.set(s,i),i.observe(s),s.dataset.enterAnimation=a,s.dataset.isIntersecting=!1;const c={willChange:"transform, opacity, filter",transformOrigin:"center center",transition:"all 0.7s ease-in-out",transformStyle:"preserve-3d",backfaceVisibility:"hidden",transform:e[a]||t};Object.assign(s.style,c,n)}))}))})(i)}))};document.addEventListener("DOMContentLoaded",c),document.addEventListener("pjax:complete",c)})();