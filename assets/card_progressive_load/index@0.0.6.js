(()=>{const e=new Map,t=(e,t)=>{e.dataset.isIntersecting=t;const{enterAnimation:n,enterDuration:a}=e.dataset;t&&n?(e.style.opacity="1","undefined"!==a&&e.style.setProperty("--animate-duration",a),e.classList.add(n),e.addEventListener("animationend",(t=>{t.stopPropagation(),e.classList.remove(n)}))):t||(e.style.opacity="0")},n=e=>{for(const n of e){const e=n.target;if(n.isIntersecting){if("true"==e.dataset.isIntersecting)return;t(e,!0)}else{if("false"==e.dataset.isIntersecting)return;t(e,!1)}}},a=[{className:"#recent-posts .recent-post-item",enterAnimation:"animate__flipInX",enterDuration:"1.2s"},{className:"#aside-content .card-widget:not(.mobile #card-toc)",enterAnimation:"animate__backInRight",enterDuration:"1s"},{className:"#pagination",enterAnimation:"animate__rubberBand",enterDuration:"1s"}],s=()=>{setTimeout((()=>{(()=>{for(const t of e.entries()){const[e,n]=t;n.unobserve(e)}e.clear()})(),(t=>{t.forEach((({className:t,enterAnimation:a,enterDuration:s})=>{document.querySelectorAll(t).forEach((t=>{const i=new IntersectionObserver(n,{threshold:.1});e.set(t,i),i.observe(t),Object.assign(t.dataset,{enterAnimation:a,enterDuration:s,isIntersecting:!1}),t.classList.add("animate__animated"),Object.assign(t.style,{willChange:"transform",opacity:"0"})}))}))})(a)}))};document.addEventListener("DOMContentLoaded",s),document.addEventListener("pjax:complete",s)})();