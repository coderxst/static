(()=>{const t=[{className:"#recent-posts .recent-post-item",enterAnimation:"leftToRight"},{className:"#aside-content .card-widget:not(.mobile #card-toc)",enterAnimation:"rightToLeft"}],e={leftToRight:"translateX(-50%)",rightToLeft:"translateX(50%)",topToBottom:"translateY(-20%)",bottomToTop:"translateY(20%)"},n=new Map,s=(t,n)=>{t.dataset.isIntersecting=n;const s=t.dataset.enterAnimation;let a={transform:"translate(0, 0)",opacity:"1"};if(!n&&s){a={transform:e[s],opacity:"0"}}Object.assign(t.style,a)},a=t=>{for(const e of t){const t=e.target;if(e.isIntersecting){if("true"==t.dataset.isIntersecting)return;s(t,!0)}else{if("false"==t.dataset.isIntersecting)return;s(t,!1)}}},o=()=>{(()=>{for(const t of n.entries()){const e=t[0];t[1].unobserve(e)}n.clear()})(),(t=>{t.map((t=>t.className)).forEach((s=>{const o=document.querySelectorAll(s),r=t.find((t=>t.className===s)),i=r?.enterAnimation;o.forEach((t=>{const s=new IntersectionObserver(a,{threshold:.1});n.set(t,s),s.observe(t),t.dataset.enterAnimation=i,t.dataset.isIntersecting=!1;const o=e[i];Object.assign(t.style,{willChange:"transform",transition:"all 0.5s ease-in-out",transform:o||"translate(0, 0)",opacity:"0"})}))}))})(t)};document.addEventListener("DOMContentLoaded",o),document.addEventListener("pjax:complete",o)})();