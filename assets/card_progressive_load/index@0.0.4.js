(()=>{const t={leftToRight:"translateX(-50%)",rightToLeft:"translateX(50%)",topToBottom:"translateY(-20%)",bottomToTop:"translateY(20%)",opacity:"",scale:"scale(0.5)"},e="scale(1) translate(0)",n={opacity:"0",filter:"blur(20px)"},s={opacity:"1",filter:"blur(0)"},a=new Map,r=(a,r)=>{a.dataset.isIntersecting=r;const o=a.dataset.enterAnimation;let i={transform:e};if(i=Object.assign(i,s),!r&&o){i={transform:t[o]},i=Object.assign(i,n)}Object.assign(a.style,i)},o=t=>{for(const e of t){const t=e.target;if(e.isIntersecting){if("true"==t.dataset.isIntersecting)return;r(t,!0)}else{if("false"==t.dataset.isIntersecting)return;r(t,!1)}}},i=[{className:"#recent-posts .recent-post-item",enterAnimation:"scale"},{className:"#aside-content .card-widget:not(.mobile #card-toc)",enterAnimation:"rightToLeft"}],c=()=>{(()=>{for(const t of a.entries()){const e=t[0];t[1].unobserve(e)}a.clear()})(),(s=>{s.map((t=>t.className)).forEach((r=>{const i=document.querySelectorAll(r),c=s.find((t=>t.className===r)),l=c?.enterAnimation;i.forEach((s=>{const r=new IntersectionObserver(o,{threshold:.1});a.set(s,r),r.observe(s),s.dataset.enterAnimation=l,s.dataset.isIntersecting=!1;const i={willChange:"transform",transformOrigin:"center center",transition:"all 0.7s ease-in-out",transform:t[l]||e};Object.assign(s.style,i,n)}))}))})(i)};document.addEventListener("DOMContentLoaded",c),document.addEventListener("pjax:complete",c)})();