(()=>{const t={leftToRight:"translateX(-50%)",rightToLeft:"translateX(50%)",topToBottom:"translateY(-20%)",bottomToTop:"translateY(20%)",opacity:""},e=new Map,n=(e,n)=>{e.dataset.isIntersecting=n;const s=e.dataset.enterAnimation;let a={transform:"translate(0, 0)",opacity:"1"};if(!n&&s){a={transform:t[s],opacity:"0"}}Object.assign(e.style,a)},s=t=>{for(const e of t){const t=e.target;if(e.isIntersecting){if("true"==t.dataset.isIntersecting)return;n(t,!0)}else{if("false"==t.dataset.isIntersecting)return;n(t,!1)}}},a=[{className:"#recent-posts .recent-post-item",enterAnimation:"opacity"},{className:"#aside-content .card-widget:not(.mobile #card-toc)",enterAnimation:"rightToLeft"}],o=()=>{(()=>{for(const t of e.entries()){const e=t[0];t[1].unobserve(e)}e.clear()})(),(n=>{n.map((t=>t.className)).forEach((a=>{const o=document.querySelectorAll(a),r=n.find((t=>t.className===a)),i=r?.enterAnimation;o.forEach((n=>{const a=new IntersectionObserver(s,{threshold:.1});e.set(n,a),a.observe(n),n.dataset.enterAnimation=i,n.dataset.isIntersecting=!1;const o=t[i];Object.assign(n.style,{willChange:"transform",transition:"all 0.5s ease-in-out",transform:o||"translate(0, 0)",opacity:"0"})}))}))})(a)};document.addEventListener("DOMContentLoaded",o),document.addEventListener("pjax:complete",o)})();